{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../background-message.service\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"password\"];\nconst _c1 = [\"newPassword\"];\nconst _c2 = [\"confirmNewPassword\"];\n\nfunction LoginComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7)(2, \"div\", 8);\n    i0.ɵɵelement(3, \"input\", 9, 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_8_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n\n      const _r2 = i0.ɵɵreference(4);\n\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.login(_r2.value));\n    });\n    i0.ɵɵtext(6, \"Login\");\n    i0.ɵɵelementEnd()()();\n  }\n}\n\nfunction LoginComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 7)(2, \"div\", 8);\n    i0.ɵɵelement(3, \"input\", 13, 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 8);\n    i0.ɵɵelement(6, \"input\", 15, 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_9_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r8);\n\n      const _r5 = i0.ɵɵreference(4);\n\n      const _r6 = i0.ɵɵreference(7);\n\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.register(_r5.value, _r6.value));\n    });\n    i0.ɵɵtext(9, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(router, changeDetector, messageService) {\n      this.router = router;\n      this.changeDetector = changeDetector;\n      this.messageService = messageService;\n      this.loggedIn = new EventEmitter();\n      this.loginState = false;\n      this.extAuthenticationState = false;\n    }\n\n    ngAfterViewInit() {\n      this.messageService.sendMessage({\n        task: 7\n        /* TASKS.CHECK_EXT_AUTHENTICATION */\n\n      }, response => {\n        if (response.result) {\n          this.extAuthenticationState = true;\n          this.changeDetector.detectChanges();\n          this.messageService.sendMessage({\n            task: 4\n            /* TASKS.CHECK_LOGIN_STATE */\n\n          }, response => {\n            if (response.result) {\n              this.loggedIn.emit(true);\n            }\n          });\n        }\n      });\n    }\n\n    ngOnInit() {}\n\n    login(password) {\n      if (password.length != 0) {\n        this.messageService.sendMessage({\n          task: 5\n          /* TASKS.LOGIN */\n          ,\n          password: password\n        }, response => {\n          if (response.result) {\n            this.loggedIn.emit(true);\n          } else {\n            this.password.nativeElement.value = '';\n            this.password.nativeElement.classList.add('invalid-input');\n            this.password.nativeElement.placeholder = 'Invalid password';\n          }\n        });\n      } else {\n        this.password.nativeElement.placeholder = 'Please enter the password';\n        this.password.nativeElement.classList.add('invalid-input');\n      }\n    }\n\n    register(password1, password2) {\n      if (password1.length != 0) {\n        if (password2.length != 0) {\n          if (password1 == password2) {\n            this.messageService.sendMessage({\n              task: 8\n              /* TASKS.INIT_EXT_AUTHENTICATION */\n              ,\n              password: password1\n            }, response => {\n              if (response.result) {\n                this.extAuthenticationState = true;\n                this.changeDetector.detectChanges();\n              }\n            });\n          } else {\n            this.confirmNewPassword.nativeElement.value = '';\n            this.confirmNewPassword.nativeElement.placeholder = 'Passwords do not match';\n            this.confirmNewPassword.nativeElement.classList.add('invalid-input');\n          }\n        } else {\n          this.confirmNewPassword.nativeElement.placeholder = 'Please confirm new password';\n          this.confirmNewPassword.nativeElement.classList.add('invalid-input');\n        }\n      } else {\n        this.newPassword.nativeElement.placeholder = 'Please enter new password';\n        this.newPassword.nativeElement.classList.add('invalid-input');\n      }\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.BackgroundMessageService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    viewQuery: function LoginComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.password = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.newPassword = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.confirmNewPassword = _t.first);\n      }\n    },\n    outputs: {\n      loggedIn: \"loggedIn\"\n    },\n    decls: 10,\n    vars: 2,\n    consts: [[1, \"d-flex\", \"flex-column\", \"align-items-center\", \"w-100\", \"login-wrapper\"], [1, \"d-flex\", \"flex-column\", \"align-items-center\", \"logo\"], [\"src\", \"assets/logo.svg\", \"alt\", \"did siop logo\"], [1, \"description\"], [\"class\", \"login-controls\", 4, \"ngIf\"], [\"class\", \"init-controls\", 4, \"ngIf\"], [1, \"login-controls\"], [1, \"form\", \"d-flex\", \"flex-column\", \"justify-content-center\", \"align-items-center\"], [1, \"input-group\", \"input-group-sm\"], [\"id\", \"password\", \"type\", \"password\", \"placeholder\", \"Enter Password\", \"aria-label\", \"Small\", \"aria-describedby\", \"inputGroup-sizing-sm\", 1, \"form-control\"], [\"password\", \"\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-ok\", 3, \"click\"], [1, \"init-controls\"], [\"id\", \"newPassword\", \"type\", \"password\", \"placeholder\", \"Enter New Password\", \"aria-label\", \"Small\", \"aria-describedby\", \"inputGroup-sizing-sm\", 1, \"form-control\"], [\"newPassword\", \"\"], [\"id\", \"confirmNewPassword\", \"type\", \"password\", \"placeholder\", \"Confirm New Password\", \"aria-label\", \"Small\", \"aria-describedby\", \"inputGroup-sizing-sm\", 1, \"form-control\"], [\"confirmNewPassword\", \"\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"img\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"p\");\n        i0.ɵɵtext(5, \"Self-issued OpenIDConnect Provider based on \");\n        i0.ɵɵelement(6, \"br\");\n        i0.ɵɵtext(7, \" Decentralized Identities\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(8, LoginComponent_div_8_Template, 7, 0, \"div\", 4);\n        i0.ɵɵtemplate(9, LoginComponent_div_9_Template, 10, 0, \"div\", 5);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.extAuthenticationState);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.extAuthenticationState);\n      }\n    },\n    dependencies: [i3.NgIf],\n    styles: [\".login-wrapper[_ngcontent-%COMP%]{width:100%;height:100%;padding-top:150px}.logo[_ngcontent-%COMP%]{width:180px;height:65px}.logo[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:100%;max-height:100%}.description[_ngcontent-%COMP%]{text-align:center;margin-bottom:35px}.login-controls[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .init-controls[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{margin-bottom:20px}.input-group-sm[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{font-size:16px;background-color:transparent;border:none;border-bottom:1px solid #24c1b6}.input-group-sm[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::placeholder{text-align:center}.input-group-sm[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{outline:none!important;box-shadow:none}.invalid-input[_ngcontent-%COMP%]::placeholder{color:red;font-size:12px}.btn-ok[_ngcontent-%COMP%]{background-color:#24c1b6;border:1px solid #24c1b6;border-radius:40px;width:150px}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}